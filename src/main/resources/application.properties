spring.application.name=WeatherWearGPT

spring.profiles.active=prod

accuweather.api.key=${ACCUWEATHER_API_KEY}
spring.jwt.secret=${spring.jwt.secret}
openai.api.key=${openai.api.key}
#naver.client-id=${naver.client-id}
#naver.client-secret=${naver.client-secret}
#google.client-id=${google.client-id}
#google.client-secret=${google.client-secret}
google.api.key=${google.api.key}
stablediffusion.api.key=${stablediffusion.api.key}

#secure.properties
#API key -> secure.properties
spring.config.import=optional:classpath:secure.properties

# OAuth2 ?? (Naver)
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.client-id=${naver.client-id}
spring.security.oauth2.client.registration.naver.client-secret=${naver.client-secret}
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver,http://ec2-43-202-86-72.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email

#provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# OAuth2 ?? (Google)
spring.security.oauth2.client.registration.google.client-name=google
spring.security.oauth2.client.registration.google.client-id=${google.client-id}
spring.security.oauth2.client.registration.google.client-secret=${google.client-secret}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google,http://ec2-43-202-86-72.ap-northeast-2.compute.amazonaws.com:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email

# Hibernate & JDBC ?? ??
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.jdbc.datasource=DEBUG
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect

logging.level.com.weatherweargpt.service.ImageGenerationService=DEBUG
logging.level.com.weatherweargpt.service.GPTService=DEBUG

# ?? ?? ??
logging.level.root=DEBUG

# Stable Diffusion API 설정
stablediffusion.api.url=https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image

# OpenAI API ??
openai.api.url=https://api.openai.com/v1/chat/completions
openai.api.image.url=https://api.openai.com/v1/images/generations

# Logback 설정 파일 위치 (필요시 경로 조정)
logging.config=classpath:logback.xml

# UTF-8 인코딩 강제 설정
spring.output.ansi.enabled=ALWAYS
logging.file.encoding=UTF-8

# 로그 파일 위치 설정
logging.file.path=logs
logging.file.name=weatherweargpt.log

# 모든 로거에 대해 UTF-8 인코딩 설정
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

